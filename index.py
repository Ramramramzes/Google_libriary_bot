import telebot
import os
from dotenv import load_dotenv
from google.oauth2 import service_account
from googleapiclient.discovery import build
import time
import logging

load_dotenv()
myToken = os.getenv('myToken')
channel_id = os.getenv('channel_id')
bot = telebot.TeleBot(myToken)


class UserContext:
    def __init__(self):
        self.ignoreFlag = False
        self.descripsion_mode = False
        self.send_book_msg = None
        self.begin_msg = None
        self.book_name = ""
        self.again_msg = None
        self.finish_msg = None
        self.reg = None
        self.sentBooks = []
        self.last_button_click = {}

user_contexts = {}

def get_user_context(user_id):
    if user_id not in user_contexts:
        user_contexts[user_id] = UserContext()
    return user_contexts[user_id]

#  –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞
credentials_file = 'myKey.json'

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
creds = None
if os.path.exists(credentials_file):
  creds = service_account.Credentials.from_service_account_file(
      credentials_file, scopes=['https://www.googleapis.com/auth/drive.readonly']
  )

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ API
service = build('drive', 'v3', credentials=creds)

# ID –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å
folder_id = os.getenv('folder_id')
# !----------------------------------------------------------------------------START
@bot.message_handler(commands=['start'])
def start(message):
  user_id = message.from_user.id
  user_context = get_user_context(user_id)
  bot.send_message(message.chat.id,'–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ OMFSüìö')
  try:
    bot.delete_message(message.chat.id, message.message_id)
  except:
    pass

  check_subscription_mess(user_id,channel_id,message)
  if user_context.descripsion_mode is False:
    try:
      bot.delete_message(message.chat.id, message.message_id)
    except:
      pass
  else:
    user_context.begin_msg = bot.send_message(message.chat.id,'–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚úÖ')
    user_context.send_book_msg = bot.send_message(message.chat.id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ üìï')
    user_context.ignoreFlag = False

# !----------------------------------------------------------------------------MESSAGE
@bot.message_handler(content_types=['text', 'audio', 'document', 'photo', 'sticker', 'video', 'video_note', 'voice', 'location', 'contact', 'new_chat_members', 'left_chat_member', 'new_chat_title', 'new_chat_photo', 'delete_chat_photo', 'group_chat_created', 'supergroup_chat_created', 'channel_chat_created', 'migrate_to_chat_id', 'migrate_from_chat_id', 'pinned_message', 'web_app_data'])
def send_book(message):
  user_id = message.from_user.id
  user_context = get_user_context(user_id)

  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ
  if message.content_type != 'text':
    try:
      bot.delete_message(message.chat.id, message.id)
      return
    except:
      pass 

  bot.send_chat_action(message.chat.id, action="typing")
  try:
    bot.delete_message(user_context.begin_msg.chat.id, user_context.begin_msg.message_id)
  except:
    pass
  try:
    if user_context.ignoreFlag is not False:
      bot.delete_message(message.chat.id, message.id)
      return
  except:
    pass
  try:
    bot.delete_message(user_context.again_msg.chat.id, user_context.again_msg.message_id)
  except:
    pass
  try:
    bot.delete_message(user_context.finish_msg.chat.id, user_context.finish_msg.message_id)
  except:
    pass
  if check_subscription_call_checker(user_id, channel_id):
      
    user_context.book_name = message.text.strip()

    try:
      bot.delete_message(user_context.send_book_msg.chat.id, user_context.send_book_msg.message_id)
    except:
      pass

    
    if len(user_context.book_name) <= 2:
      try:
        bot.delete_message(message.chat.id, message.id)
      except:
        pass
      user_context.again_msg = bot.send_message(message.chat.id,'–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å ü§è')
      user_context.send_book_msg = bot.send_message(message.chat.id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ üìï')
      user_context.ignoreFlag = False
      return
    
    #! –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ –¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    results = service.files().list(q=f"'{folder_id}' in parents", fields="files(id, name)",pageSize=1000).execute()
    files = results.get('files', [])

    finalArr = []
    nameArr = []
    for file in files:
      file_id = file['id']
      file_name = file['name']
      file_link = f"https://docs.google.com/file/d/{file_id}"
      # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ —Å–æ–≤–ø–∞–≤—à–∏–º–∏ —Å –ø–æ–∏—Å–∫–æ–º
      if user_context.book_name.lower() in file_name.lower():
          if file_link not in finalArr:
            finalArr.append(file_link)
            nameArr.append(file_name)
    if len(finalArr) != 0:
      # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è  
      user_context.ignoreFlag = True
      user_context.sentBooks = []
      inc = 0
      for link in finalArr:
        time.sleep(.25)
        user_context.sentBooks.append(bot.send_message(message.chat.id, f'–ü–æ—Ö–æ–∂–∏–µ –Ω–∞ "{user_context.book_name}" –∫–Ω–∏–≥–∏ üìñ : <a href="{link}">{nameArr[inc]}</a>',disable_web_page_preview=True,parse_mode='HTML'))
        inc+=1
        user_context.ignoreFlag = True
      # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      bot.delete_message(message.chat.id, message.id)
      markup = telebot.types.InlineKeyboardMarkup()
      item = telebot.types.InlineKeyboardButton("–ò—Å–∫–∞—Ç—å üîé", callback_data='clear')
      markup.add(item)
      user_context.ignoreFlag = True
      user_context.finish_msg = bot.send_message(message.chat.id, '–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω ‚úÖ', reply_markup=markup)

    else:
      bot.delete_message(message.chat.id, message.id)
      user_context.finish_msg = bot.send_message(message.chat.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚ùå')
      user_context.send_book_msg = bot.send_message(message.chat.id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ üìï')
      user_context.ignoreFlag = False
  else:
    bot.delete_message(message.chat.id, message.id)
    check_subscription_mess(user_id, channel_id,message)
# !----------------------------------------------------------------------------CALL_MAIN
@bot.callback_query_handler(func=lambda call: call.data == 'main')
def main(call):
  user_id = call.from_user.id
  user_context = get_user_context(user_id)

  if user_id in user_context.last_button_click and time.time() - user_context.last_button_click[user_id] < 3 and user_context.descripsion_mode is not True:
    bot.answer_callback_query(call.id, '–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É üò°', show_alert=True)
  else:
    user_context.last_button_click[user_id] = time.time()
    if user_context.descripsion_mode is False:
  # !----------------------------------------------------------------------------–ü–û–î–ü–ò–°–ö–ò_–ù–ï–¢
      bot.answer_callback_query(call.id, '–ü—Ä–æ–≤–µ—Ä—è–µ–º ‚åõ', show_alert=True)
      try:
        bot.delete_message(user_context.reg.chat.id, user_context.reg.message_id)
      except:
        pass
      try:
        bot.delete_message(user_context.finish_msg.chat.id, user_context.finish_msg.message_id)
      except:
        pass
      check_subscription_call(user_id,channel_id,call)
    else:
  # !---------------------------------------------------------------------------–ü–û–î–ü–ò–°–ö–ê_–ï–°–¢–¨
      try:
        bot.delete_message(user_context.again_msg.chat.id, user_context.again_msg.message_id)
      except:
        pass
      try:
        bot.delete_message(user_context.begin_msg.chat.id, user_context.begin_msg.message_id)
      except:
        pass
      try:
        bot.delete_message(user_context.finish_msg.chat.id, user_context.finish_msg.message_id)
      except:
        pass
      try:
        bot.delete_message(user_context.reg.chat.id, user_context.reg.message_id)
      except:
        pass
      user_context.send_book_msg = bot.send_message(call.message.chat.id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ üìï')
      user_context.ignoreFlag = False

def check_subscription_mess(user_id, channel_id,message):
  user_id = message.from_user.id
  user_context = get_user_context(user_id)

  chat_member = bot.get_chat_member(chat_id=int(channel_id), user_id=int(user_id))
  if chat_member.status in ["member","administrator","creator"]:
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
    user_context.descripsion_mode = True
    return True  
  elif chat_member.status not in ["member"]:
    user_context.descripsion_mode = False
    markup = telebot.types.InlineKeyboardMarkup()
    item = telebot.types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ", callback_data='main')
    markup.add(item)
    try:
      bot.delete_message(user_context.send_book_msg.chat.id, user_context.send_book_msg.message_id)
    except:
      pass
    user_context.reg = bot.send_message(message.chat.id,'–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üåê\nhttps://t.me/omfsrus',reply_markup=markup)
    user_context.ignoreFlag = True
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
    return False

def check_subscription_call(user_id, channel_id,call):
  user_context = get_user_context(user_id)

  chat_member = bot.get_chat_member(chat_id=int(channel_id), user_id=int(user_id))
  if chat_member.status in ["member","administrator","creator"]:
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
    user_context.descripsion_mode = True
    main(call)
    return True  
  elif chat_member.status not in ["member"]:
    user_context.descripsion_mode = False
    try:
      bot.delete_message(user_context.send_book_msg.chat.id, user_context.send_book_msg.message_id)
    except:
      pass
    markup = telebot.types.InlineKeyboardMarkup()
    item = telebot.types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ", callback_data='main')
    markup.add(item)
    user_context.reg = bot.send_message(call.message.chat.id,'–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üåê\nhttps://t.me/omfsrus',reply_markup=markup)
    user_context.ignoreFlag = True
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
    return False    

def check_subscription_call_checker(user_id, channel_id):
  user_context = get_user_context(user_id)
  
  chat_member = bot.get_chat_member(chat_id=int(channel_id), user_id=int(user_id))
  if chat_member.status in ["member","administrator","creator"]:
    user_context.descripsion_mode = True
    return True  
  elif chat_member.status not in ["member"]:
    user_context.descripsion_mode = False
    return False  
# !----------------------------------------------------------------------------CALL_SHORT
@bot.callback_query_handler(func=lambda call: call.data == 'short')
def short_book_name(call):
  user_id = call.from_user.id
  user_context = get_user_context(user_id)
  
  if user_context.descripsion_mode is True:
    bot.delete_message(user_context.again_msg.chat.id, user_context.again_msg.message_id)
    user_context.send_book_msg = bot.send_message(call.message.chat.id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ üìï')
    user_context.ignoreFlag = False
  else:
    check_subscription_call(user_id,channel_id,call)
    try:
      bot.delete_message(user_context.again_msg.chat.id, user_context.again_msg.message_id)
    except:
      pass
# !----------------------------------------------------------------------------CALL_CLEAR
@bot.callback_query_handler(func=lambda call: call.data == 'clear')
def clear(call):
  bot.answer_callback_query(call.id, '–ß–∏—Å—Ç–∏–º üßπ', show_alert=True)
  user_id = call.from_user.id
  user_context = get_user_context(user_id)
  for message_obj in user_context.sentBooks:
    try:
      bot.delete_message(call.message.chat.id, message_obj.message_id)
    except:
      pass
  try:
    bot.delete_message(user_context.finish_msg.chat.id, user_context.finish_msg.message_id)
  except:
    pass
  user_context.noneFlag = False

  main(call)

# –ù–∞—Å—Ç—Ä–æ–∏–º –∂—É—Ä–Ω–∞–ª –ª–æ–≥–æ–≤
logging.basicConfig(filename='myapp.log', level=logging.ERROR)

# –°–æ–∑–¥–∞–¥–∏–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è stdout –∏ stderr
stderr_logger = logging.getLogger('stderr_logger')

# –°–æ–∑–¥–∞–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ stdout –∏ stderr –≤ –∂—É—Ä–Ω–∞–ª
class StderrLogHandler(logging.Handler):
    def emit(self, record):
        log_message = self.format(record)
        stderr_logger.error(log_message)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –æ–±—ä–µ–∫—Ç–∞–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
stderr_logger.addHandler(StderrLogHandler())

if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"An error occurred: {e}")
            time.sleep(1)  # –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –æ–ø—Ä–æ—Å–∞

